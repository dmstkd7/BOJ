#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <queue>
#include <utility>
using namespace std;


const int MAX_V = 1000;
const int INF = 987654321;

vector< pair<int, int> > adj[MAX_V];
vector< pair<int, int> > selected;


int V;

int prim(){
	int ret = 0;
	selected.clear();
	vector<bool> added(V+1, false);
	vector<int> minWeight(V+1, INF);
	vector<int> parent(V, -1);
	
	minWeight[1] = 0;
	
	for (int iter = 0; iter < V; iter++){
		int u = -1;
		for (int v = 1; v <= V; ++v){
			if (!added[v] && (u == -1 || minWeight[u] > minWeight[v])){
				u = v;
			}
		}
		//if (parent[u] != u)
		//	selected.push_back(make_pair(parent[u], u));
		//printf("%d %d ", u, minWeight[u]);
		ret += minWeight[u];
		added[u] = true;

		for (int i = 0; i < adj[u].size(); ++i){
			int v = adj[u][i].first;
			int weight = adj[u][i].second;

			if (minWeight[v] > weight){
				minWeight[v] = weight;
			}
		}
	}
	return ret;



}


int main(void){

	int Test_Case;
	int N, M;
	int v1, v2, w;
	int result;
	//freopen("input.txt", "r", stdin);
	//scanf("%d", &Test_Case);
	Test_Case = 1;
	for (int i = 1; i <= Test_Case; ++i){
		scanf("%d", &V);
		scanf("%d", &M);
		for (int i = 0; i < M; ++i){
			scanf("%d%d%d", &v1, &v2, &w);
			adj[v1].push_back(make_pair(v2, w));
			adj[v2].push_back(make_pair(v1, w));
		}
		
		result = prim();

		printf("%d\n", result);

	}

	return 0;
}
